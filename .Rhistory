"Bits",
"Sockets")),
effect = "Surface Flaws")
cause.effect.diagram(cause = list(Measurements = c("Micrometers",
"Microscopes",
"Inspectors"),
Materials = c("Alloys",
"Lubricants",
"Suppliers"),
Personnel = c("Shifts",
"Supervisors",
"Training",
"Operators"),
Environment = c("Condensation",
"Moisture"),
Methods = c("Brake",
"Engager",
"Angle"),
Machines = c("Speed",
"Lathes",
"Bits",
"Sockets")),
effect = "Surface Flaws")
cause.and.effect(cause = list(Measurements = c("Micrometers",
"Microscopes",
"Inspectors"),
Materials = c("Alloys",
"Lubricants",
"Suppliers"),
Personnel = c("Shifts",
"Supervisors",
"Training",
"Operators"),
Environment = c("Condensation",
"Moisture"),
Methods = c("Brake",
"Engager",
"Angle"),
Machines = c("Speed",
"Lathes",
"Bits",
"Sockets")),
effect = "Surface Flaws")
View(pistonrings)
library(shiny); runApp('Exos/ShinyExample.R')
library(shiny)
library(ggplot2)
data(pistonrings) #données example de pistons
attach(pistonrings) # permet de dire à qcc que nous nous referons aux données lors de l'appel de la fonction
diameter <- qcc.groups(diameter, sample) #on va creer les données diametre avec les diametre et les sous groups seront les "sample"
runApp('Exos/ShinyExample.R')
runApp('Exos/ShinyExample.R')
View(exo_silice)
View(exo_silice)
write.csv(exo_silice,"Exos/exo_silice.csv")
dataset <- read.csv("Exos/exo_silice.csv")
View(exo_silice)
View(dataset)
head(dataset)
summary(dataset)
exo_silice <- read_csv("Exos/exo_silice.csv",
col_types = cols(...1 = col_skip()))
exo_silice <- read_csv("Exos/exo_silice.csv",
col_types = cols(...1 = col_skip()))
exo_silice <- read.csv("Exos/exo_silice.csv",
col_types = cols(...1 = col_skip()))
View(exo_silice)
dataset <- read.csv("Exos/exo_silice.csv")
View(dataset)
View(exo_silice)
dataset <- read.csv2("Exos/exo_silice.csv")
View(dataset)
dataset <- read_csv("Exos/exo_silice.csv")
View(dataset)
library(readr)
exo_silice <- read_csv("Exos/exo_silice.csv",
col_types = cols(...1 = col_skip()))
View(exo_silice)
write_csv(exo_silice,"Exos/exo_silice.csv")
dataset <- read_csv("Exos/exo_silice.csv")
View(dataset)
head(dataset)
summary(dataset)
summary(pistonrings)
q <- qcc(dataset, type = "xbar")
summary(q) #avec cette fonction il est possible de regarder les statistiques calculés pour le digramme
qcc(dataset, type = "R") #création du digramme R
q <- qcc(dataset, type = "xbar")
pc = process.capability(q1, spec.limits = c(114,175))
pc = process.capability(q, spec.limits = c(114,175))
data(pistonrings) #données example de pistons
dataset <- pistonrings
View(dataset)
# Calculate descriptive statistics
mean_value <- mean(dataset$diameter)
sd_value <- sd(dataset$diameter)
min_value <- min(dataset$diameter)
max_value <- max(dataset$diameter)
data_summary <- dataset %>% group_by(diameter) %>%
summarise(
mean_value = mean(diameter),
sd_value = sd(diameter),
min_value = min(diameter),
max_value = max(diameter)
)
View(data_summary)
data_summary <- dataset %>%
summarise(
mean_value = mean(diameter),
sd_value = sd(diameter),
min_value = min(diameter),
max_value = max(diameter)
)
View(data_summary)
data_summary <- dataset %>% group_by(trial)
summarise(
mean_value = mean(diameter),
sd_value = sd(diameter),
min_value = min(diameter),
max_value = max(diameter)
)
View(dataset)
data_summary <- dataset %>% group_by("trial")
summarise(
mean_value = mean(diameter),
sd_value = sd(diameter),
min_value = min(diameter),
max_value = max(diameter)
)
data_summary <- dataset %>% group_by(trial)
summarise(
mean_value = mean(diameter),
sd_value = sd(diameter),
min_value = min(diameter),
max_value = max(diameter)
)
data_summary <- dataset %>% group_by(trial) %>%
summarise(
mean_value = mean(diameter),
sd_value = sd(diameter),
min_value = min(diameter),
max_value = max(diameter)
)
View(data_summary)
ggplot(dataset, aes(x = diameter)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black") +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
# Create a box plot
ggplot(dataset, aes(x = 1, y = diameter)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "Box Plot of Variable", x = "", y = "Variable")
ggplot(dataset, aes(x = diameter)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black") +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
ggplot(dataset, aes(x = diameter)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
View(dataset)
ggplot(dataset, aes(diameter)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
ggplot(dataset, aes(diameter)) +
geom_histogram() +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
ggplot(dataset, aes(diameter)) +
geom_histogram(fill="lightblue") +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
ggplot(dataset, aes(diameter)) +
geom_histogram(fill=trial) +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
ggplot(dataset, aes(diameter)) +
geom_histogram() +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
dataset %>% ggplot(aes(diameter)) +
geom_histogram() +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
dataset %>% ggplot(aes(diameter)) +
geom_histogram(fill = trial) +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
View(dataset)
dataset %>% ggplot(aes(diameter)) +
geom_histogram(fill = "trail") +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
dataset %>% ggplot(aes(diameter)) +
geom_histogram() +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence") +
facet_wrap(trial)
ggplot(dataset, aes(diameter)) +
geom_boxplot() +
labs(title = "Box Plot of Variable", x = "", y = "Variable")
ggplot(dataset, aes(x = 1, y = diameter)) +
geom_boxplot() +
labs(title = "Box Plot of Variable", x = "", y = "Variable")
ggplot(dataset, aes(diameter)) +
geom_boxplot() +
labs(title = "Box Plot of Variable", x = "", y = "Variable")
ggplot(dataset, aes(x = trial, y =diameter)) +
geom_boxplot() +
labs(title = "Box Plot of Variable", x = "", y = "Variable")
runApp('App1')
faithful
library(shiny); runApp('Exos/ShinyExample.R')
runApp('Exos/ShinyExample.R')
runApp('Exos/ShinyExample.R')
View(pistonrings)
runApp('Exos/ShinyExample.R')
runApp('Exos/ShinyExample.R')
library(readxl)
CMdynamometre <- read_excel("données/CMdynamometre.xlsx",
col_names = FALSE)
View(CMdynamometre)
View(pistonrings)
View(CMdynamometre)
library(qcc)
library(tidyverse)
library(ggplot2)
data(pistonrings)
View(pistonrings)
attach(pistonrings) # permet de dire à qcc que nous nous referons aux données lors de l'appel de la fonction
diameter <- qcc.groups(diameter, sample) #on va creer les données diametre avec les diametre et les sous groups seront les "sample"
head(diameter) #afficher les données
View(pistonrings)
View(diameter)
View(CMdynamometre)
library(readxl)
CMdynamometre <- read_excel("données/CMdynamometre.xlsx")
View(CMdynamometre)
library(qcc)
library(tidyverse)
library(ggplot2)
View(diameter)
# Creer un diagrmme X-bar et R
q1 <- qcc(CMdynamometre, type = "xbar")
summary(q1) #avec cette fonction il est possible de regarder les statistiques calculés pour le digramme
#pour un affichage en français il est possible de personaliser les titres et labels
# version en français
q1 <- qcc(diameter, type = "xbar", label.limits = c("LCI", "LCS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Diammetre", lang = "FR")
#pour un affichage en français il est possible de personaliser les titres et labels
# version en français
q1 <- qcc(diameter, type = "xbar", label.limits = c("LRI", "LRS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Diammetre", lang = "FR")
qcc(diameter, type = "R") #création du digramme R
(beta <- oc.curves(q1)) # probabilité de détection de l'erreur Beta selon la taille du sous-groupe
pc = process.capability(q1, spec.limits = c(65,75), target = 70) # changer la cible
pc = process.capability(q1, spec.limits = c(65, 75), target = 70) # changer la cible
pc = process.capability(q1, spec.limits = c(65,75))
q1 <- qcc(diameter, type = "xbar", label.limits = c("LRI", "LRS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Diammetre", lang = "FR")
pc = process.capability(q1, spec.limits = c(65,75))
pc = process.capability(q1, spec.limits = c(65, 75), target = 70) # changer la cible
q1 <- qcc(diameter, type = "xbar", label.limits = c("LRI", "LRS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Diammetre", lang = "FR")
q1 <- qcc(CMdynamometre, type = "xbar", label.limits = c("LRI", "LRS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Diammetre", lang = "FR")
qcc(CMdynamometre, type = "R") #création du digramme R
(beta <- oc.curves(q1)) # probabilité de détection de l'erreur Beta selon la taille du sous-groupe
pc = process.capability(q1, spec.limits = c(65,75))
pc = process.capability(q1, spec.limits = c(65, 75), target = 70) # changer la cible
q1 <- qcc(CMdynamometre, type = "xbar", label.limits = c("LRI", "LRS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Nm", lang = "FR")
library(qcc)
library(tidyverse)
library(ggplot2)
# Creer un diagrmme X-bar et R
q1 <- qcc(CMdynamometre, type = "xbar")
summary(q1) #avec cette fonction il est possible de regarder les statistiques calculés pour le digramme
q1 <- qcc(CMdynamometre, type = "xbar", label.limits = c("LRI", "LRS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Nm", lang = "FR")
q1 <- qcc(CMdynamometre, type = "xbar", center = 70 , limits = c(65, 75) , label.limits = c("LRI", "LRS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Nm", lang = "FR")
q1 <- qcc(CMdynamometre, type = "xbar", center = 70 ,  label.limits = c("LRI", "LRS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Nm", lang = "FR")
q1 <- qcc(CMdynamometre, type = "xbar", center = 70 , limits = c(65, 75) , label.limits = c("LRI", "LRS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Nm", lang = "FR")
q1 <- qcc(CMdynamometre, type = "xbar", label.limits = c("LRI", "LRS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Nm", lang = "FR")
pc = process.capability(q1, spec.limits = c(65, 75), target = 70) # changer la cible
q1 <- qcc(CMdynamometre, type = "xbar", label.limits = c("LRI", "LRS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Nm", lang = "FR")
q1 <- qcc(CMdynamometre, type = "xbar", center = 70 ,  label.limits = c("LRI", "LRS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Nm", lang = "FR")
qcc(CMdynamometre, type = "R") #création du digramme R
library(qcc)
library(tidyverse)
library(ggplot2)
q1 <- qcc(CMdynamometre, type = "xbar")
# version en français
q1 <- qcc(CMdynamometre, type = "xbar", label.limits = c("LCI", "LCS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Nm", lang = "FR")
q1 <- qcc(CMdynamometre, type = "xbar", center = 70 ,  label.limits = c("LCI", "LCS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Nm", lang = "FR")
q1 <- qcc(CMdynamometre, type = "xbar", center = 70 , limits = c(65, 75) , label.limits = c("LRI", "LRS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Nm", lang = "FR")
q1 <- qcc(CMdynamometre, type = "xbar", center = 70 ,  label.limits = c("LCI", "LCS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Nm", lang = "FR")
q1 <- qcc(CMdynamometre, type = "xbar", center = 70 ,  label.limits = c("LCI", "LCS"), title = "Carte de controle des moyennes", xlab	= "Groupe", ylab	= "Nm", lang = "FR")
# Load the necessary libraries
library(dplyr)
# Generate sample data
set.seed(123)
# Date and Time stamps
dates <- rep(seq(as.Date("2023-01-01"), as.Date("2023-01-10"), by = "days"), each = 10)
times <- rep(seq(from = 0, by = 1, length.out = 10), times = 10)
# Product ID
product_id <- rep(1:10, each = 10)
# Generate random measurements for each attribute
n_samples <- length(dates)
length <- replicate(n_samples, rnorm(5, mean = 50, sd = 2))
width <- replicate(n_samples, rnorm(5, mean = 10, sd = 1))
thickness <- replicate(n_samples, rnorm(5, mean = 5, sd = 0.5))
weight <- replicate(n_samples, rnorm(5, mean = 100, sd = 5))
# Create the dataset
ManufacturingQualityData <- data.frame(
Date = rep(dates, each = 5),
Time = rep(times, each = 5),
Product_ID = rep(product_id, each = 5),
Length_cm = unlist(length),
Width_cm = unlist(width),
Thickness_mm = unlist(thickness),
Weight_kg = unlist(weight)
)
# Output the dataset
head(ManufacturingQualityData)
library(dplyr)
set.seed(123)
dates <- rep(seq(as.Date("2023-01-01"), as.Date("2023-01-10"), by = "days"), each = 10)
times <- rep(seq(from = 0, by = 1, length.out = 10), times = 10)
# Product ID
product_id <- rep(1:10, each = 10)
# Generate random measurements for each attribute
n_samples <- length(dates)
length <- replicate(n_samples, rnorm(5, mean = 50, sd = 2))
width <- replicate(n_samples, rnorm(5, mean = 10, sd = 1))
thickness <- replicate(n_samples, rnorm(5, mean = 5, sd = 0.5))
weight <- replicate(n_samples, rnorm(5, mean = 100, sd = 5))
ManufacturingQualityData <- data.frame(
Date = rep(dates, each = 5),
Time = rep(times, each = 5),
Product_ID = rep(product_id, each = 5),
Length_cm = unlist(length),
Width_cm = unlist(width),
Thickness_mm = unlist(thickness),
Weight_kg = unlist(weight)
)
# Output the dataset
head(ManufacturingQualityData)
View(ManufacturingQualityData)
n_samples <- 5
length <- replicate(n_samples, rnorm(5, mean = 50, sd = 2))
width <- replicate(n_samples, rnorm(5, mean = 10, sd = 1))
thickness <- replicate(n_samples, rnorm(5, mean = 5, sd = 0.5))
weight <- replicate(n_samples, rnorm(5, mean = 100, sd = 5))
# Create the dataset
ManufacturingQualityData <- data.frame(
Date = rep(dates, each = 5),
Time = rep(times, each = 5),
Product_ID = rep(product_id, each = 5),
Length_cm = unlist(length),
Width_cm = unlist(width),
Thickness_mm = unlist(thickness),
Weight_kg = unlist(weight)
)
View(ManufacturingQualityData)
set.seed(123)
# Date and Time stamps
dates <- rep(seq(as.Date("2023-01-01"), as.Date("2023-01-10"), by = "days"), each = 10)
times <- rep(seq(from = 0, by = 1, length.out = 10), times = 10)
# Product ID
# Generate random measurements for each attribute
n_samples <- 5
length <- replicate(n_samples, rnorm(5, mean = 50, sd = 2))
width <- replicate(n_samples, rnorm(5, mean = 10, sd = 1))
weight <- replicate(n_samples, rnorm(5, mean = 100, sd = 5))
# Create the dataset
ManufacturingQualityData <- data.frame(
Date = dates,
Time = times,
Length_cm = unlist(length),
Width_cm = unlist(width),
Weight_kg = unlist(weight)
)
View(ManufacturingQualityData)
times <- seq(from = 0, by = 1, length.out = 100)
# Product ID
# Generate random measurements for each attribute
n_samples <- 5
length <- replicate(n_samples, rnorm(5, mean = 50, sd = 2))
width <- replicate(n_samples, rnorm(5, mean = 10, sd = 1))
weight <- replicate(n_samples, rnorm(5, mean = 100, sd = 5))
# Create the dataset
ManufacturingQualityData <- data.frame(
Date = dates,
Time = times,
Length_cm = unlist(length),
Width_cm = unlist(width),
Weight_kg = unlist(weight)
)
View(ManufacturingQualityData)
times <- seq(from = 0, by = 1, length.out = 100)
# Product ID
# Generate random measurements for each attribute
n_samples <- 5
length <- replicate(n_samples, rnorm(5, mean = 50, sd = 2))
width <- replicate(n_samples, rnorm(5, mean = 10, sd = 1))
weight <- replicate(n_samples, rnorm(5, mean = 100, sd = 5))
# Create the dataset
ManufacturingQualityData <- data.frame(
Date = dates,
Time = times,
Length_cm = unlist(length),
Width_cm = unlist(width),
Weight_kg = unlist(weight)
)
times <- seq(from = 0, by = 1, length.out = 100)
# Product ID
# Generate random measurements for each attribute
n_samples <- 5
length <- replicate(n_samples, rnorm(5, mean = 50, sd = 2))
width <- replicate(n_samples, rnorm(5, mean = 10, sd = 1))
weight <- replicate(n_samples, rnorm(5, mean = 100, sd = 5))
# Create the dataset
ManufacturingQualityData <- data.frame(
Time = times,
Length_cm = unlist(length),
Width_cm = unlist(width),
Weight_kg = unlist(weight)
)
# Output the dataset
head(ManufacturingQualityData)
View(ManufacturingQualityData)
View(ManufacturingQualityData)
View(ManufacturingQualityData)
write.csv(ManufacturingQualityData, "manufacturing_data.csv", row.names = FALSE)
library(shiny); runApp('Exos/ShinyExample.R')
# charger les libraries necessaires,
library(qcc)
library(tidyverse)
library(ggplot2)
# Importer et verifier le dataset
data(pistonrings) #données example de pistons
dataset <- pistonrings
# Calculer des statistiques descriptives V1
mean_value <- mean(dataset$diameter)
sd_value <- sd(dataset$diameter)
min_value <- min(dataset$diameter)
max_value <- max(dataset$diameter)
## Calculer des statistiques descriptives V2 tydiverse
data_summary <- dataset %>% group_by(trial) %>%
summarise(
mean_value = mean(diameter),
sd_value = sd(diameter),
min_value = min(diameter),
max_value = max(diameter)
)
View(data_summary)
# Creer un histogram
dataset %>% ggplot(aes(diameter)) +
geom_histogram() +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
# Creer un boxplot - boite à moustaches
ggplot(dataset, aes(x = trial, y =diameter)) +
geom_boxplot() +
labs(title = "Box Plot of Variable", x = "", y = "Variable")
library(qcc)
library(tidyverse)
library(ggplot2)
library(readr)
# Import and inspect the dataset
dataset <- read_csv("Exos/exo_silice.csv")
View(dataset)
# Creer un diagrmme X-bar et R
q <- qcc(dataset, type = "xbar")
#voir le résumé de l'object control chart
summary(q)
qcc(dataset, type = "R") #création du digramme R
# calcules de capabilité
pc = process.capability(q, spec.limits = c(114,175))
library(qcc)
library(tidyverse)
library(ggplot2)
# charger les données
data(pistonrings) #données example de pistons
#Piston rings for an automotive engine are produced by a forging process.
#The inside diameter of the rings manufactured by the process is measured on 25 samples, each of size 5,
# for the control phase I, when preliminary samples from a process being considered 'in control'
# are used to construct control charts. Then, further 15 samples, again each of size 5,
#are obtained for phase II.
attach(pistonrings) # permet de dire à qcc que nous nous referons aux données lors de l'appel de la fonction
diameter <- qcc.groups(diameter, sample) #on va creer les données diametre avec les diametre et les sous groups seront les "sample"
head(diameter) #afficher les données
# Creer un diagrmme X-bar et R
q1 <- qcc(diameter, type = "xbar")
#on a créee un object qcc et affiché le diagramme correspondant
summary(q1) #avec cette fonction il est possible de regarder les statistiques calculés pour le digramme
q1 <- qcc(diameter, type = "xbar", label.limits = c("LCI", "LCS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Diammetre", lang = "FR")
qcc(diameter, type = "R") #création du digramme R
defect <- c(80, 27, 66, 94, 33)
names(defect) <- c("code de prix", "mauvais date", "code fournisseur", "num. contact", "num. part")
(pc = pareto.chart(defect, ylab = "Fréquence d'erreurs"))
# exemple Diagramme Ishikawa
cause.and.effect(cause = list(Measurements = c("Micrometers",
"Microscopes",
"Inspectors"),
Materials = c("Alloys",
"Lubricants",
"Suppliers"),
Personnel = c("Shifts",
"Supervisors",
"Training",
"Operators"),
Environment = c("Condensation",
"Moisture"),
Methods = c("Brake",
"Engager",
"Angle"),
Machines = c("Speed",
"Lathes",
"Bits",
"Sockets")),
effect = "Surface Flaws")
library(qcc)
library(tidyverse)
library(ggplot2)
# Creer un diagrmme X-bar et R
q1 <- qcc(CMdynamometre, type = "xbar")
q1 <- qcc(CMdynamometre, type = "xbar", label.limits = c("LCI", "LCS"), title = "Carte de controle des moyennes", xlab	= "Groupe", ylab	= "Nm", lang = "FR")
shiny::runApp('App1')
runApp('Exos/ShinyExample.R')
