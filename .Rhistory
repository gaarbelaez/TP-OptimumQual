library(magick)
data(pistonrings)
attach(pistonrings)
diameter <- qcc.groups(diameter, sample)
save as images
data(pistonrings)
attach(pistonrings)
diameter <- qcc.groups(diameter, sample)
#save as images
jpeg(file="q1.jpeg")
cusum(diameter[1:25,], decision.interval = 4, se.shift = 1)
dev.off()
jpeg(file="q2.jpeg")
cusum(diameter[1:25,], newdata=diameter[26:40,])
dev.off()
#read and combine images
q1 <- image_read("q1.jpeg")
q2 <- image_read("q2.jpeg")
img <- c(q1, q2)
image_append(img)
data(boiler) #données example de pistons
#save as images
jpeg(file="q1.jpeg")
q1 <- qcc(boiler$t1, type = "xbar")
#save as images
jpeg(file="q1.jpeg")
q1 <- qcc(boiler$t1, type = "xbar.one")
dev.off()
jpeg(file="q2.jpeg")
q2 <- qcc(boiler$t4, type = "xbar.one")
dev.off()
#read and combine images
q1 <- image_read("q1.jpeg")
q2 <- image_read("q2.jpeg")
img <- c(q1, q2)
image_append(img)
dataset <- read_csv("données/manufacturing_data.csv")
dataset <- read_csv("données/manufacturing_data.csv")
# charger les libraries necessaires, dans ce cas nous utilisons qcc
library(qcc)
library(tidyverse)
library(ggplot2)
library(readr)
# Import and inspect the dataset
dataset <- read_csv("données/manufacturing_data.csv")
# Import and inspect the dataset
dataset <- read_csv("données/manufacturing_data.csv")
View(dataset)
dataset_l <- dataset %>% select(Length_cm.1:Length_cm.5)
View(dataset_l)
# Creer un diagrmme X-bar et R
q <- qcc(dataset_l, type = "xbar")
# Import and inspect the dataset
dataset <- read_csv("données/manufacturing_data.csv")
dataset_l <- dataset %>% select(Length_cm.1:Length_cm.5)
# Creer un diagrmme X-bar et R
q <- qcc(dataset_l, type = "xbar")
# Creer un diagrmme X-bar et R
q <- qcc(dataset_l, type = "xbar")
q1 <- qcc(dataset_l, type = "xbar")
attach(pistonrings) # permet de dire à qcc que nous nous referons aux données lors de l'appel de la fonction
library(qcc)
library(tidyverse)
library(ggplot2)
# charger les données
data(pistonrings) #données example de pistons
#Piston rings for an automotive engine are produced by a forging process.
#The inside diameter of the rings manufactured by the process is measured on 25 samples, each of size 5,
# for the control phase I, when preliminary samples from a process being considered 'in control'
# are used to construct control charts. Then, further 15 samples, again each of size 5,
#are obtained for phase II.
attach(pistonrings) # permet de dire à qcc que nous nous referons aux données lors de l'appel de la fonction
diameter <- qcc.groups(diameter, sample) #on va creer les données diametre avec les diametre et les sous groups seront les "sample"
head(diameter) #afficher les données
# Creer un diagrmme X-bar et R
q1 <- qcc(diameter, type = "xbar")
dev.off()
library(qcc)
library(tidyverse)
library(ggplot2)
library(readr)
# Import and inspect the dataset
dataset <- read_csv("données/manufacturing_data.csv")
dataset_l <- dataset %>% select(Length_cm.1:Length_cm.5)
Creer un diagrmme X-bar et R
# Creer un diagrmme X-bar et R
q1 <- qcc(dataset_l, type = "xbar")
View(dataset)
pc = process.capability(q,)
# calcules de capabilité
pc = process.capability(q, spec.limits = c(48,52))
# calcules de capabilité
pc = process.capability(q1, spec.limits = c(48,52))
q1 <- qcc(dataset_l, type = "xbar")
# calcules de capabilité
pc = process.capability(q1, spec.limits = c(48,52))
# calcules de capabilité
pc = process.capability(q1, spec.limits = c(48,52))
pc = process.capability(q1, spec.limits = c(46,53))
# calcules de capabilité
pc = process.capability(q1, spec.limits = c(46,56))
# charger les libraries necessaires, dans ce cas nous utilisons qcc
library(qcc)
library(tidyverse)
library(ggplot2)
library(readr)
data(orangejuice)
(q = with(orangejuice, qcc(D[trial], sizes = size[trial], type = "p")))
View(orangejuice)
library(shiny); runApp('Exos/ShinyExample.R')
runApp('App1')
runApp('Exos/ShinyExample.R')
runApp('Exos/ShinyExample.R')
runApp('Exos/ShinyExample.R')
runApp('Exos/ShinyExample.R')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
mean(dataset_l)
runApp('Test')
meanDataset <- mean(dataset_l)
dataset <- read_csv("manufacturing_data.csv")
runApp('Test')
setwd("~/Desktop/Cours capability/TP-OptimumQual/Test")
runApp()
meanDataset <- mean(dataset_l)
dataset <- read_csv("manufacturing_data.csv")
dataset_l <- dataset %>% select(Length_cm.1:Length_cm.5)
meanDataset <- mean(dataset_l)
runApp()
meanDataset <- summary(q1)
q1<-qcc(dataset_l[1:input$data_points,], type = "xbar")
attach(pistonrings) # permet de dire à qcc que nous nous referons aux données lors de l'appel de la fonction
diameter <- qcc.groups(diameter, sample) #on va creer les données diametre avec les diametre et les sous groups seront les "sample"
head(diameter) #afficher les données
# Creer un diagrmme X-bar et R
q1 <- qcc(diameter, type = "xbar")
#on a créee un object qcc et affiché le diagramme correspondant
summary(q1) #avec cette fonction il est possible
runApp()
runApp()
runApp('test.R')
runApp()
View(dataset)
library(qcc) # pour cartes de control
library(tidyverse) #pour données
library(ggplot2) #pour les grafiques
data(pistonrings) #données example de pistons
dataset <- pistonrings
View(pistonrings)
View(dataset)
# Calculer des statistiques descriptives V1
mean_value <- mean(dataset$diameter)
sd_value <- sd(dataset$diameter)
min_value <- min(dataset$diameter)
max_value <- max(dataset$diameter)
data_summary <- dataset %>% group_by(trial) %>%
summarise(
mean_value = mean(diameter),
sd_value = sd(diameter),
min_value = min(diameter),
max_value = max(diameter)
)
View(data_summary)
# Creer un histogram
dataset %>% ggplot(aes(diameter)) +
geom_histogram() +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
# Creer un boxplot - boite à moustaches
ggplot(dataset, aes(x = trial, y =diameter)) +
geom_boxplot() +
labs(title = "Box Plot of Variable", x = "", y = "Variable")
# charger les libraries necessaires, dans ce cas nous utilisons qcc
library(qcc)
library(tidyverse)
library(ggplot2)
data(pistonrings) #données example de pistons
#Piston rings for an automotive engine are produced by a forging process.
#The inside diameter of the rings manufactured by the process is measured on 25 samples, each of size 5,
# for the control phase I, when preliminary samples from a process being considered 'in control'
# are used to construct control charts. Then, further 15 samples, again each of size 5,
#are obtained for phase II.
attach(pistonrings) # permet de dire à qcc que nous nous referons aux données lors de l'appel de la fonction
diameter <- qcc.groups(diameter, sample) #on va creer les données diametre avec les diametre et les sous groups seront les "sample"
head(diameter) #afficher les données
View(pistonrings)
View(diameter)
q1 <- qcc(diameter, type = "xbar")
summary(q1) #avec cette fonction il est possible de regarder les statistiques calculés pour le digramme
q1 <- qcc(diameter, type = "xbar", label.limits = c("LCI", "LCS"), title = "Carte de controle", xlab	= "Groupe", ylab	= "Diammetre", lang = "FR")
qcc(diameter, type = "R") #création du digramme R
q1 <- qcc(diameter[1:25,], type = "xbar") #grafiquer uniquement les 25
q1 <- qcc(diameter[1:25,], type = "xbar", newdata=diameter[26:40,]) #integrer les nouvelles données
(beta <- oc.curves(q1)) # probabilité de détection de l'erreur Beta selon la taille du sous-groupe
pc = process.capability(q1, spec.limits = c(73.95,74.05))
pc = process.capability(q1, spec.limits = c(73.95,74.05), target = 74.02) # changer la cible
pc = process.capability(q1, spec.limits = c(73.99,74.01)) #reduire les limites pour tester, voir l'effet sur la capabilité
defect <- c(80, 27, 66, 94, 33)
names(defect) <- c("code de prix", "mauvais date", "code fournisseur", "num. contact", "num. part")
(pc = pareto.chart(defect, ylab = "Fréquence d'erreurs"))
# exemple Diagramme Ishikawa
cause.and.effect(cause = list(Measurements = c("Micrometers",
"Microscopes",
"Inspectors"),
Materials = c("Alloys",
"Lubricants",
"Suppliers"),
Personnel = c("Shifts",
"Supervisors",
"Training",
"Operators"),
Environment = c("Condensation",
"Moisture"),
Methods = c("Brake",
"Engager",
"Angle"),
Machines = c("Speed",
"Lathes",
"Bits",
"Sockets")),
effect = "Surface Flaws")
data(boiler) #données example de pistons
View(boiler)
# charger les libraries necessaires, dans ce cas nous utilisons qcc
library(qcc)
library(tidyverse)
library(ggplot2)
data(boiler) #données example de pistons
View(boiler)
# charger les libraries necessaires, dans ce cas nous utilisons qcc
library(qcc)
library(tidyverse)
library(ggplot2)
library(readr)
# Import and inspect the dataset
dataset <- read_csv("Exos/exo_silice.csv")
dataset2 <- read_xl("données/CMdynamometre.xlsx")
library(qcc)
library(tidyverse)
library(ggplot2)
library(readr)
library(readxl)
dataset2 <- read_excel("données/CMdynamometre.xlsx")
View(dataset2)
View(dataset2)
data(pcmanufact)
data(orangejuice)
View(orangejuice)
data(pcmanufact)
View(pcmanufact)
data(circuit)
View(circuit)
data(orangejuice)
q = with(orangejuice, qcc(D[trial], sizes = size[trial], type = "p"))
q = with(orangejuice, qcc(D[trial], sizes = size[trial], type = "np"))
View(circuit)
library(qcc)
library(tidyverse)
library(ggplot2)
data(orangejuice)
data(orangejuice)
View(orangejuice)
q = with(orangejuice, qcc(D, sizes = size, type = "np"))
q = with(orangejuice, qcc(D[trial], sizes = size[trial], type = "np"))
q = with(orangejuice, qcc(D[trial], sizes = size[trial], type = "p"))
q = with(orangejuice, qcc(D[trial], sizes = size[trial], type = "p", newdata = D[!trial], newsizes = size[!trial]))
q = with(orangejuice, qcc(D[trial], sizes = size[trial], type = "p", new = D[!trial], newsizes = size[!trial]))
q = with(orangejuice, qcc(D[trial], sizes = size[trial], type = "p", newdata = D[!trial], newsizes = size[!trial]))
data(pcmanufact) #PC
data(circuit) #cartes electroniques
q = with(orangejuice, qcc(D[trial=TRUE], sizes = size[trial], type = "p", newdata = D[trial=FALSE], newsizes = size[!trial]))
q = with(orangejuice, qcc(D[trial==TRUE], sizes = size[trial==TRUE], type = "p", newdata = D[trial==FALSE], newsizes = size[!trial]))
q = with(orangejuice, qcc(D[trial==TRUE], sizes = size[trial==TRUE], type = "p", newdata = D[trial==FALSE], newsizes = size[trial==FALSE]))
data(circuit) #cartes electroniques
q = with(circuit, qcc(D, sizes = size, type = "np"))
q = with(circuit, qcc(x, sizes = size, type = "np"))
q = with(circuit, qcc(x[trial==TRUE], sizes = size[trial==TRUE], type = "np", newdata = x[trial==FALSE], newsizes = size[trial==FALSE]))
data(pcmanufact) #PC nombre de non-conformités dans des lots de 5 PC
q = with(pcmanufact, qcc(x, sizes = size, type = "c"))
q = with(pcmanufact, qcc(x, sizes = size, type = "u"))
q = with(pcmanufact, qcc(x, sizes = size, type = "c"))
# charger les libraries necessaires, dans ce cas nous utilisons qcc
library(qcc)
library(tidyverse)
library(ggplot2)
library(readr)
# Import and inspect the dataset
dataset <- read_csv("données/manufacturing_data.csv")
# Import and inspect the dataset
dataset <- read_csv("données/manufacturing_data.csv")
View(dataset)
dataset_l <- dataset %>% select(Length_cm.1:Length_cm.5)
View(dataset_l)
# Creer un diagrmme X-bar et R
q1 <- qcc(dataset_l, type = "xbar")
qcc(dataset, type = "R") #création du digramme R
# calcules de capabilité
pc = process.capability(q1, spec.limits = c(46,56))
qcc(dataset_l, type = "R") #création du digramme R
summary(q1)
qcc(dataset_l, type = "R") #création du digramme R
pc = process.capability(q1, spec.limits = c(46,56))
View(dataset)
pc = process.capability(q1, spec.limits = c(30,60))
pc = process.capability(q1, spec.limits = c(40,60))
# Creer un diagrmme X-bar et R
q1 <- qcc(dataset_l, type = "xbar")
View(dataset_l)
View(dataset_l)
View(dataset)
dataset_width <- dataset %>% select(Width_cm.1,Width_cm.2,Width_cm.3, Width_cm.4, Width_cm.5)
View(dataset_width)
dataset_w <- dataset %>% select(Weight_kg.1:Weight_kg.5)
View(dataset_w)
q1 <- qcc(dataset_width, type = "xbar")
#voir le résumé de l'object control chart
summary(q1)
qcc(dataset_w, type = "R") #création du digramme R
qcc(dataset_width, type = "R") #création du digramme R
# calcules de capabilité
pc = process.capability(q1, spec.limits = c(40,60))
pc = process.capability(q1, spec.limits = c(1,15))
data(viscosity)
library(qcc)
data(viscosity)
data(pistonrings) #données example de pistons
library(qcc) # pour cartes de control
detach("package:qcc", unload = TRUE)
library(qcc)
detach("package:qcc", unload = TRUE)
library(qcc)
library(qcc)
data(viscosity)
data(pistonrings)
data(viscosity)
data(antifreeze)
data(Antifreeze)
x <- c(33.75, 33.05, 34, 33.81, 33.46, 34.02, 33.68, 33.27, 33.49, 33.20,
33.62, 33.00, 33.54, 33.12, 33.84)
exit
viscosity <- c(33.75, 33.05, 34, 33.81, 33.46, 34.02, 33.68, 33.27, 33.49, 33.20,
33.62, 33.00, 33.54, 33.12, 33.84)
q1 <- qcc(viscosity, type = "xbar")
q1 <- qcc(viscosity, type = "xbar.one")
viscosity <- c(33.75, 33.05, 34, 33.81, 33.46, 34.02, 33.68, 33.27, 33.49, 33.20,
33.62, 33.00, 33.54, 33.12, 33.84)
shiny::runApp('Introduction')
runApp('Introduction')
runApp('App1')
runApp('Introduction')
runApp('Exos/TP2-ShinyExample.R')
runApp('Exos/TP2-ShinyExample.R')
library(tidyverse) #pour données
# charger les libraries necessaires,
library(qcc) # pour cartes de control
source("~/Desktop/Cours capability/TP1-OptQual/Introduction/Intro1.R")
runApp('Exos/TP2-ShinyExample.R')
runApp('Introduction')
runApp('App1')
runApp('App1')
knit_with_parameters("~/Desktop/Cours capability/TP1-OptQual/Introduction/Rapport.Rmd")
runApp('Introduction')
runApp('App1')
times <- seq(from = 0, by = 1, length.out = 100)
n_samples <- 5
length <- replicate(n_samples, rnorm(5, mean = 50, sd = 2))
width <- replicate(n_samples, rnorm(5, mean = 10, sd = 1))
weight <- replicate(n_samples, rnorm(5, mean = 100, sd = 5))
# Create the dataset
ManufacturingQualityData <- data.frame(
Time = times,
Length_cm = unlist(length),
Width_cm = unlist(width),
Weight_kg = unlist(weight)
)
View(ManufacturingQualityData)
runApp('testTP')
runApp('testTP')
runApp('testTP')
runApp('testTP')
runApp('testTP')
runApp('testTP')
runApp('testTP')
setwd("~/Desktop/Cours capability/TP1-OptQual/testTP")
runApp()
setwd("~/Desktop/Cours capability/TP1-OptQual")
runApp('testTP')
runApp('testTP')
runApp('testTP')
runApp('testTP')
runApp('testTP')
runApp('testTP')
runApp('testTP')
runApp('testTP')
runApp('testTP')
runApp('testTP')
runApp('testTP')
runApp('complexshinyapp.R')
runApp('complexshinyapp.R')
# Define UI for application
ui <- fluidPage(
titlePanel("Bottle Error Tracking"),
sidebarLayout(
sidebarPanel(
img(src = "figBottle.png", height = 300, width = 300), # Add your bottle image here
checkboxGroupInput("errors", "Select Errors:",
choices = c("Cap", "Label 1", "Label 2", "Other")),
actionButton("submit", "Submit")
),
mainPanel(
plotOutput("error_plot")
)
)
)
runApp('testTP/App2.R')
runApp('testTP')
runApp('testTP')
runApp('testTP')
shiny::runApp('testTP')
library(shiny)
library(ggplot2)
library(dplyr)
runApp('testTP')
# charger les libraries necessaires,
library(qcc) # pour cartes de control
library(qcc) # pour cartes de control
library(tidyverse) #pour données
library(ggplot2) #pour les grafiques
# Importer et verifier le dataset
data(pistonrings) #données example de pistons
dataset <- pistonrings
# Calculer des statistiques descriptives V1
mean_value <- mean(dataset$diameter)
sd_value <- sd(dataset$diameter)
min_value <- min(dataset$diameter)
max_value <- max(dataset$diameter)
## Calculer des statistiques descriptives V2 tydiverse
data_summary <- dataset %>% group_by(trial) %>%
summarise(
mean_value = mean(diameter),
sd_value = sd(diameter),
min_value = min(diameter),
max_value = max(diameter)
)
# Creer un histogram
dataset %>% ggplot(aes(diameter)) +
geom_histogram() +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
# Creer un boxplot - boite à moustaches
ggplot(dataset, aes(x = trial, y =diameter)) +
geom_boxplot() +
labs(title = "Box Plot of Variable", x = "", y = "Variable")
library(qcc)
library(tidyverse)
library(ggplot2)
# charger les données
data(pistonrings) #données example de pistons
#Piston rings for an automotive engine are produced by a forging process.
#The inside diameter of the rings manufactured by the process is measured on 25 samples, each of size 5,
# for the control phase I, when preliminary samples from a process being considered 'in control'
# are used to construct control charts. Then, further 15 samples, again each of size 5,
#are obtained for phase II.
attach(pistonrings) # permet de dire à qcc que nous nous referons aux données lors de l'appel de la fonction
diameter <- qcc.groups(diameter, sample) #on va creer les données diametre avec les diametre et les sous groups seront les "sample"
head(diameter) #afficher les données
# Creer un diagrmme X-bar et R
q1 <- qcc(diameter, type = "xbar")
# charger les libraries necessaires,
library(qcc) # pour cartes de control
library(tidyverse) #pour données
library(ggplot2) #pour les grafiques
# Importer et verifier le dataset
data(pistonrings) #données example de pistons
dataset <- pistonrings
# Calculer des statistiques descriptives V1
mean_value <- mean(dataset$diameter)
sd_value <- sd(dataset$diameter)
min_value <- min(dataset$diameter)
# charger les libraries necessaires,
library(qcc) # pour cartes de control
library(tidyverse) #pour données
library(ggplot2) #pour les grafiques
# Importer et verifier le dataset
data(pistonrings) #données example de pistons
dataset <- pistonrings
# Calculer des statistiques descriptives V1
mean_value <- mean(dataset$diameter)
sd_value <- sd(dataset$diameter)
min_value <- min(dataset$diameter)
max_value <- max(dataset$diameter)
## Calculer des statistiques descriptives V2 tydiverse
data_summary <- dataset %>% group_by(trial) %>%
summarise(
mean_value = mean(diameter),
sd_value = sd(diameter),
min_value = min(diameter),
max_value = max(diameter)
)
# Creer un histogram
dataset %>% ggplot(aes(diameter)) +
geom_histogram() +
labs(title = "Histogram des diametres", x = "Diametre", y = "Frequence")
# Creer un boxplot - boite à moustaches
ggplot(dataset, aes(x = trial, y =diameter)) +
geom_boxplot() +
labs(title = "Box Plot of Variable", x = "", y = "Variable")
